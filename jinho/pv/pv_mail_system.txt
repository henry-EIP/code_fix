* 경로 : /var/www/daemon/pv_cron
* DB : solar
* Table : PV_Real_Data, PV_Sensor_Data
* 목적 : 센서 데이터의 결측 발생시 관리자에게 메일 전송
* 실행
- crontab 사용 (1시간)
- 사용자 계정 (whchoe)에서 crontab -e 를 입력해 아래와 같이 수정
>>  0 * * * *    /var/www/daemon/pv_cron/pv_email_system.sh

# pv_email_system.sh
- 파이썬 파일을 실행시키는 쉘 스크립트 파일이다.
- 쉘 스크립트 파일에 아래와 같이 실행할 언어, 버젼의 설치 위치와 실행할 파일 위치를 입력한다.
    """
    #! /bin/bash
    /etc/anaconda3/bin/python /var/www/daemon/pv_cron/mail_system.py
    """

# mail_system.py
def mail_send(last_time, comp, data_name):
- 결측 발생시 관리자에게 메일 전송

def insert_log(comp, data_name):
- 결측 데이터 발생시 로그 파일에 입력

if __name__ == "__main__":
- main.py 파일 실행시 시작부분
- comp_list에 태양광 리스트를 삽입

for comp in comp_list:
    - comp 변수에 comp_list의 태양광 리스트를 하나씩 삽입 
    - real_timestamp : mysql_def의 reception_cheack_real_data 함수에 comp를 매개변수로 한 return값 삽입
    - sensor_timestamp : mysql_def의 reception_cheack_sensor_data 함수에 comp를 매개변수로 한 return값 삽입
    - real_timestamp_strptime : 날짜 끼리 비교를 위해 real_timestamp의 string형태의 date 데이터를 datetime형태로 변환 후 삽입 
    - sensor_timestamp_strptime : 날짜 끼리 비교를 위해 sensor_timestamp의 string형태의 date 데이터를 datetime형태로 변환 후 삽입
    - nowDatetime : 현재 시간을 datetime 형태로 변환 후 삽입
    - real_minus_now : nowDatetime - real_timestamp_strptime의 값을 초로 바꿔서 삽입
    - sensor_minus_now : nowDatetime - sensor_timestamp_strptime의 값을 초로 바꿔서 삽입

    if real_minus_now > limit_second:
        - real_data 5분 이상 결측시 mail_send 함수 실행
    if sensor_minus_now > limit_second:
        - sensor_data 5분 이상 결측시 mail_send 함수 실행
        
# mysql_def.py

def reception_cheack_real_data(comp_name):
- 회사 이름을 매개변수로 전달받고 PV_Real_Data 테이블에서 해당 회사의 가장 최근 데이터 1행의 date, time 을 가져옴 

def reception_cheack_sensor_data(comp_name):
- 회사 이름을 매개변수로 전달받고 PV_Sensor_Data 테이블에서 해당 회사의 가장 최근 데이터 1행의 date, time 을 가져옴 
